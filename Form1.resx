<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAVnHHTVNuxMdSa8PnUGvC+FBqwf1OacD/TmnA/09pwf5Qa8L7qaS89fPVuKX/3LRm/963LgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAE5rwHVOacD/TmnA/05pwP9OacD/TmnA/05pwP9OacD/TmnA/6umuv//3LX//9y1///c
        tf//3LX/+Ni258+8u75hc8ZZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAS2S68E1ov/9OacD/TmnA/05pwP9OacD/TmnA/05pwP+ppLr//9y1///c
        tf//3LX//9y1///ctf/82rX/ho68/05pwP9RbMPvVnHHegAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJYLb2TGe9/05pwP9OacD/TmnA/05pwP9OacD/qaS6///c
        tf//3LX//9y1///ctf//3LX//Nq1/4aOvP9OacD/TmnA/05pwP9OacD/UWzC7FNxw00AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEdetPtMZbz/TmnA/05pwP9OacD/TmnA/6mk
        uv//3LX//9y1///ctf//3LX//9y1//zatf+Gjrz/TmnA/05pwP9OacD/TmnA/05pwP9OacD/T2rA/1Vu
        xrtmZswFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAR16z/kpjuf9OacD/TmnA/05p
        wP+ppLr//9y1///ctf//3LX//9y1///ctf/92rX/i5G8/05pwP9OacD/TmnA/05pwP9OacD/TmnA/05p
        wP9OacD/TmnA/1Ftw+thcsEdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGXbP/SF+2/k5p
        wP9OacD/qaS6///ctf//3LX//9y1///ctf//3LX//dq1/4uRvP9OacD/TmnA/05pwP9OacD/TmnA/05p
        wP9OacD/UmzD/1Ruxf9Vb8b/VnDH/1hwyONbdtEcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZe
        sv9GXbL/Tmi//6mkuv//3LX//9y1///ctf//3LX//9y1//3atf+Lkbz/TmnA/05pwP9OacD/TmnA/1Bq
        wf9Wb8b/W3TL/193zv9fd87/X3fO/193zv9fd87/X3fO/193z91ceswZAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAARl2y/0Zdsv+wpbT//9y1///ctf//3LX//9y1///ctf/92rX/i5G8/05pwP9OacD/TmnA/09r
        wf9Zccj/X3bO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193ztJgcM8QAAAAAAAA
        AAAAAAAAAAAAAAAAAABGXrT7pZWe//LImv//3LX//9y1///ctf//3LX//dq1/4uRvP9OacD/TmnA/05p
        wP9Vb8b/X3bN/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/152
        zrUAAP8BAAAAAAAAAAAAAAAAAAAAAKWVoPP/yov//MmN///asv//3LX//9y1//3atf+Lkbz/TmnA/05p
        wP9PacH/WnPJ/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/153znIAAAAAAAAAAAAAAAAAAAAA/cmKm//Ki///yov/+M6h///ctf/82rX/h468/05p
        wP9OacD/T2nB/1x0y/9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO+F12zSkAAAAAAAAAAAAAAAD/yYxo/8qL///Ki//2xo7//dm0/4uR
        vP9OacD/TmnA/09qwf9cdMv/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3bOtwAAAAAAAAAAAAAAAP/KijD/yov//8qL//zI
        i/+albD+TmnA/05pwP9OacD/WXLJ/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/XXfNRwAAAAAAAAAA////AfjG
        jej7yIv/gX+l/0Zds/9NZ77/TmnA/1Vvxv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9ed869AAAAAAAA
        AAAAAAAAy6yXwYF/pf9GXbL/Rl2y/5iXtv5tfb//boHO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9ugs0zAAAAAAAAAABSY7VaRl2y/0Zdsv9GXbL/gYaz/+3Xxf/j2Nn/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/jprR/9/W2agAAAAAAAAAAAAAAABHX7XvRl2y/0Zdsv+KksH/9eXW/sK4wv+jqdT/b4PP/193
        zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/46a0f/76dv/+enb5////wEAAAAAAAAAAEpjuXxGXbL/Rl2y/3WDwP9nesL/9N7M/efa
        1v9mfM7/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv+SnNP//Orb///t2///7dv//+/ZLwAAAAAAAAAAAAAAAEdgte1GXbL/S2a8/3+O
        yP/d09T/8NW5/dTM1f+iqdP/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/jprR//vp2///7dv//+3b///t2///7dxlAAAAAAAAAAAAAAAASWa2Rkde
        s/9NaL//TmnA/1BrwP/QyNH/+uXR/oSRyv+epdP/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO/46a0f/76dv//+3b///t2///7dv//+3b/+3g26oAAAAAAAAAAAAA
        AAAAAAAASmS5oU5pwP9OacD/VG3B/6erzv+Nk77++ubT/8K+0/9mfM7/Y3rO/193zv9fd87/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO/193zv+SnNP//Orb///t2///7dv//+3b///t2///7dv/ubnV3QAA
        AAAAAAAAAAAAAAAAAACAgP8CTmnBuE5pwP9OacD/TmnA/7q50P/Jws7/8dW7/eze2P+JltL/X3fO/193
        zv9fd87/X3fO/193zv9fd87/X3fO/193zv9fd87/jprR//vp2///7dv//+3b///t2///7dv//+3b/7a3
        1f9fd87eAAAAAAAAAAAAAAAAAAAAAAAAAABQcL8QTmnA0U5pwP9OacD/VW7B/1pywv/p3Nf/9d3G/qam
        yf/SzNf/X3fO/193zv9fd87/X3fO/193zv9fd87/X3fO/46a0f/76dv//+3b///t2///7dv//+3b///t
        2/+2t9X/X3fO/193zvQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABObMQaTmnA3U5pwP9OacD/W3PC/4aT
        yf+AjML//OnX/9HEyP+IldD/jJjS/193zv9fd87/X3fO/193zv+OmtH/++nb///t2///7dv//+3b///t
        2///7dv/trfV/193zv9fd87/X3fO+QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABObMQaTmnA0U5p
        wP9OacD/TmnA/5uiy/+JlMj/yL3C+v3q2P+docz/X3fO/193zv9fd87/jprR//vp2///7dv//+3b///t
        2///7dv//+3b/7a31f9fd87/X3fO/193zv9fd875AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABQcL8QTmnBuE5pwP9OacD/TmnA/1FrwP/p3df/nqHE/u3Rtv1xgsr/X3fO/46a0f/76dv//+3b///t
        2///7dv//+3b///t2/+2t9X/X3fO/193zv9fd87/X3fO/193zuoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAP8BTmnAdU5pwPlOacD/TmnA/09qwP9OacD/UGvA/09pwPOipMn5/Ora///t
        2///7dv//+3b///t2///7dv/s7XV/193zv9fd87/X3fO/193zv9fd87/X3fO1QAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATWu+K05qwLpOacD/TmnA/05pwP9OacD/ho68//za
        tf/317j++uHK/v/s2P//7dv//+3b/7a31f9fd87/X3fO/193zv9fd87/X3fO/193zv9feM6xAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5pvktOacHATmnA/4eP
        vP7827X+/9y1///ctf//3LX//Nq1//TawP63uM//XnbO/193zv9fd87/X3fO/193zv9fd87/X3fO/194
        zoYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABfc74z7tC1mP/ctd//3LX//9y1///ctf//3LX/q6a6/05pwP9PacH6UWzD7lZvxvxac8r/XHXM/193
        zv9fd872YXnOKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/atTD/3bZp/9y0mruwucdPacDgTmnA9k5pwP9OacD9TmjA609q
        wOBQa8LQU23FwlhyykMAAAAAgAP//wAAf/8AAB//AAAH/wAAAf8AAAD/AAAAfwAAAD8AAAAfAAAADwAA
        AA8AAAAHAAAABwAAAAMAAAADgAAAAYAAAAHAAAAAwAAAAOAAAADgAAAA8AAAAPAAAAD4AAAA/AAAAP4A
        AAD/AAAA/4AAAP/gAAD/+AAA//4AAP//wAE=
</value>
  </data>
</root>